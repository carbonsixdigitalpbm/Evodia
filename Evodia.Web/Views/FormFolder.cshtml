@using Umbraco.Web
@using Umbraco.Core.Security
@using Umbraco.Core.Services
@inherits UmbracoViewPage<IPublishedContent>
@{
	Layout = "Master.cshtml";

    var contentTypeService = ApplicationContext.Current.Services.ContentTypeService;
    var isAuthorized = false;
    var userTicket = new HttpContextWrapper(HttpContext.Current).GetUmbracoAuthTicket();

    if (userTicket != null)
    {
        var currentUser = ApplicationContext.Services.UserService.GetByUsername(userTicket.Name);
        var userExists = !String.IsNullOrEmpty(currentUser.UserType.Alias);

        if (userExists && currentUser.UserType.Alias == "admin" || userExists && currentUser.UserType.Alias == "editor")
        {
            isAuthorized = true;
        }
    }
}

@if ( isAuthorized )
{
    var formMessages = Model.Children();

    <h1>@Model.Name</h1>

    <div class="u-clearfix">
        @foreach( var entry in formMessages )
        {
            var dt = contentTypeService.GetContentType(entry.DocumentTypeAlias);
            var tabs = dt.PropertyGroups;

            <div class="">
                <h2>
                    <a href="@entry.Url">@entry.Name</a>
                </h2>

                @foreach (var pg in tabs)
                {
                    <h3><strong>@pg.Name</strong></h3>

                    foreach (var pt in pg.PropertyTypes.OrderBy(x => x.SortOrder))
                    {
                        <p><strong>@pt.Name</strong>: @entry.GetPropertyValue(pt.Alias)</p>
                    }
                }

            </div>
        }
    </div>
}
else
{
    <h1>Please login</h1>
    <p>You do not have the permission to view this page. Please login and try again.</p>
}

