@using Umbraco.Web
@inherits UmbracoViewPage<IPublishedContent>
@{
	Layout = null;

    var contentTypeService = ApplicationContext.Current.Services.ContentTypeService;
    var homePage = Umbraco.TypedContentAtRoot().FirstOrDefault();
    var hasHomePage = homePage != null;

    <style type="text/css">
        .c-page {
            border: 1px solid #333333;
            margin-bottom: 20px;
            padding: 10px;
            margin-left: 40px;
            transition: background .3s ease;
            background: rgba(33, 33, 33, .1);
        }

        .c-page-propeties__tab {
            padding: 10px;
            border: 1px solid #333333;
            margin-bottom: 10px;
            transition: background .3s ease;
            background: rgba(192, 44, 44, .1);
        }

        .c-page-propeties__tab:hover {
            background: white;
            cursor: pointer;
        }

        .c-page__tab-property {
            margin-bottom: 3px;
            padding: 5px;
            display: block;
            transition: background .3s ease;
        }

        .c-page__tab-property:hover {
            background: rgba(33, 33, 33, .1);
        }
    </style>
}

@if( hasHomePage )
{
    <div class="c-page c-page--level-@Model.Level">
        <h1>@homePage.Name</h1>
        @RenderProperties(Model)
        @RenderSubPages(Model)
    </div>
}

@helper RenderSubPages(IPublishedContent subpage)
{
    <div class="c-page-subpages">
        @foreach( var page in subpage.Children )
        {
            <div class="c-page c-page--level-@subpage.Level">
                <h2 class="c-page__name">@page.Name</h2>
                @RenderProperties(page)
                @RenderSubPages(page)
            </div>
        }
    </div>
}


@helper RenderProperties(IPublishedContent page)
{
    var contentTypeService = ApplicationContext.Current.Services.ContentTypeService;
    var dt = contentTypeService.GetContentType(page.DocumentTypeAlias);
    var tabs = dt.PropertyGroups;
    var ctabs = dt.CompositionPropertyGroups;

    <div class="c-page-properties">
        @foreach (var pg in ctabs)
        {
            <div class="c-page-propeties__tab">
                <h3 class="c-page__tab-name"><strong>@pg.Name</strong></h3>

                @foreach (var pt in pg.PropertyTypes.OrderBy(x => x.SortOrder))
                {
                    switch(pt.PropertyEditorAlias)
                    {
                        case "Our.Umbraco.NestedContent":
                            @RenderNestedContent(page, pt)
                            break;
                        case "Umbraco.MultipleMediaPicker":
                            @RenderMediaPicker(page, pt)
                            break;
                        default:
                            <div class="c-page__tab-property"><strong>@pt.Name </strong><small>(@pt.PropertyEditorAlias)</small>: @page.GetPropertyValue(pt.Alias)</div>
                            break;
                    }
                }
            </div>
        }

        @foreach (var pg in tabs)
        {
            <div class="c-page-propeties__tab">
                <h3 class="c-page__tab-name"><strong>@pg.Name</strong></h3>

                @foreach (var pt in pg.PropertyTypes.OrderBy(x => x.SortOrder))
                {
                    switch(pt.PropertyEditorAlias)
                    {
                        case "Our.Umbraco.NestedContent":
                            @RenderNestedContent(page, pt)
                            break;
                        default:
                            <p class="c-page__tab-property"><strong>@pt.Name </strong><small>(@pt.PropertyEditorAlias)</small>: @page.GetPropertyValue(pt.Alias)</p>
                            break;
                    }
                }
            </div>
        }
    </div>
}

@helper RenderNestedContent(IPublishedContent page, PropertyType pt)
{
    <p class="c-page__tab-property"><strong>@pt.Name </strong><small>(@pt.PropertyEditorAlias)</small>:</p>
    <p>Render nested content from <strong>@pt.Alias</strong> on page <strong>@page.Name</strong></p>
}

@helper RenderMediaPicker(IPublishedContent page, PropertyType pt)
{
    if( page.HasValue(pt.Alias) )
    {
        var images = Umbraco.TypedMedia(page.GetPropertyValue(pt.Alias));

        foreach( var image in images )
        {
            <img src="@image.Url" alt="">
        }

    }

}
