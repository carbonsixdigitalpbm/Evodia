@using Umbraco.Web
@using Evodia.Core.Utility
@inherits UmbracoViewPage<IPublishedContent>
@{
    Layout = "MasterNews.cshtml";

    var ci = new System.Globalization.CultureInfo("en-GB");
    System.Threading.Thread.CurrentThread.CurrentCulture = ci;
    System.Threading.Thread.CurrentThread.CurrentUICulture = ci;
    var allPosts = Model.Descendants().Where( x => x.IsVisible() ).OrderBy("releaseDate desc").ToList();

    string qCat = Request.QueryString["category"];
    string qYear = Request.QueryString["year"];
    string qMonth = Request.QueryString["month"];

    int temp;
    bool searchYear = false;
    bool searchMonth = false;
    DateTime date = new DateTime();
    List<IPublishedContent> allArticles = new List<IPublishedContent>();

    if( int.TryParse(qYear, out temp) )
    {
        date = date.AddYears(Int32.Parse(qYear) - 1);
        searchYear = true;

        if( !String.IsNullOrEmpty(qMonth) )
        {
            if( Helpers.GetMonthNumber(qMonth) > 0 )
            {
                date = date.AddMonths(Helpers.GetMonthNumber(qMonth) - 1);
                searchMonth = true;
            }
        }
    }

    string docType = qCat;

    switch( docType )
    {
        case "in-the-media":
            allArticles = Model.Descendants().Where( x => x.IsVisible() && x.DocumentTypeAlias == "inTheMedia" ).OrderBy("releaseDate desc").ToList();
            break;
        case "press-release":
            allArticles = Model.Descendants().Where( x => x.IsVisible() && x.DocumentTypeAlias == "pressRelease" ).OrderBy("releaseDate desc").ToList();
            break;
        case "general-news":
            allArticles = Model.Descendants().Where( x => x.IsVisible() && x.DocumentTypeAlias == "generalNews" ).OrderBy("releaseDate desc").ToList();
            break;
        default:
            allArticles = Model.Descendants().Where( x => x.IsVisible() ).OrderBy("releaseDate desc").ToList();
            break;
    }

    if( searchYear )
    {
        allArticles = allArticles.Where(x => x.GetPropertyValue<DateTime>("releaseDate").Year.Equals(date.Year)).ToList();
    }
    if( searchMonth )
    {
        allArticles = allArticles.Where(x => x.GetPropertyValue<DateTime>("releaseDate").Month.Equals(date.Month)).ToList();
    }

    var paging = Paging.GetPages(allArticles.Count, 5);
    var selectedArticles = allArticles.Skip(paging.Skip).Take(paging.Take).ToList();

    string headline = Model.HasValue("headline") ? Model.GetPropertyValue<string>("headline") : Model.Name;
}

<div>
    <h1>@headline</h1>
    <section>
        @if( selectedArticles.Any() )
        {
            foreach( var article in selectedArticles )
            {
                string category = article.DocumentTypeAlias;

                @(category == "inTheMedia" ? RenderExternalArticle(article) : RenderSiteArticle(article))
            }
            <nav class="c-pagination">
                @PagingTemplate.RenderPaging(paging, Model.Id)
            </nav>
        }
        else
        {

        }
    </section>
</div>

@section Sidebar {
    <div class="c-pod c-pod--light">
        @if( allPosts.Any() ) {
            @Html.Partial("~/Views/Partials/Components/BlogNewsArchive.cshtml", allPosts.ToList())
        }
       @Html.Partial("~/Views/Partials/News/NewsFilter.cshtml")
    </div>
}

@helper RenderSiteArticle( IPublishedContent item ) {
    string url = item.Url;
    string postheadline = item.HasValue("headline") ? item.GetPropertyValue<string>("headline") : item.Name;
    DateTime releaseDate = item.GetPropertyValue<DateTime>("releaseDate");
    string excerpt = item.GetPropertyValue<string>("excerpt");
    string category = item.DocumentTypeAlias == "pressRelease" ? "Press release" : "General news";

    <article class="c-listing--article" itemscope itemtype="http://schema.org/Article">
        @if( item.HasValue("coverImage") )
            {
                var image = Umbraco.Media( item.GetPropertyValue<int>("coverImage") );
                string imageUrl = image.Url + "?width=800&height=343&mode=crop";

                <div class="c-listing__image-wrap">
                    <img src="@imageUrl" class="c-listing__image" alt="@postheadline"/>
                </div>
            }
        <div class="c-listing__content">
            <h2 class="c-listing__headline" itemprop="name">@postheadline</h2>
            <ul class="c-meta-data">
                <li class="c-meta-data__item">
                    <time datetime="{{metaDate}}" pubdate="pubdate">
                    @releaseDate.ToString("%d")<sup>@Helpers.GetDaySuffix(releaseDate.ToString("%d"))</sup> @releaseDate.ToString("MMMM yyyy")
                    </time>
                    <meta itemprop="dateCreated" content="@releaseDate.ToString("yyyy-MM-dd")">
                </li>
                <li class="c-meta-data__item" itemprop="keywords">@category</li>
            </ul>

            <div class="c-listing__description">
                <p>@excerpt</p>
            </div>
        </div>
        <a href="@url" class="c-listing__block-link" itemprop="url"></a>
    </article>
}

@helper RenderExternalArticle( IPublishedContent item ) {
    string url = item.GetPropertyValue<string>("sourceURL");
    string postheadline = item.HasValue("headline") ? item.GetPropertyValue<string>("headline") : item.Name;
    DateTime releaseDate = item.GetPropertyValue<DateTime>("releaseDate");
    string excerpt = item.GetPropertyValue<string>("excerpt");
    string category = "In the media";

    <article class="c-listing--article is-external" itemscope itemtype="http://schema.org/Article">
        <div class="c-listing__content">
            <h2 class="c-listing__headline" itemprop="name">@postheadline</h2>
            <ul class="c-meta-data">
                <li class="c-meta-data__item">
                    <time datetime="{{metaDate}}" pubdate="pubdate">
                    @releaseDate.ToString("%d")<sup>@Helpers.GetDaySuffix(releaseDate.ToString("%d"))</sup> @releaseDate.ToString("MMMM yyyy")
                    </time>
                    <meta itemprop="dateCreated" content="@releaseDate.ToString("yyyy-MM-dd")">
                </li>
                <li class="c-meta-data__item" itemprop="keywords">@category</li>
            </ul>

            <div class="c-listing__description">
                <p>@excerpt</p>
            </div>
        </div>
        <a href="@url" class="c-listing__block-link" itemprop="url" target="_blank"></a>
    </article>

}
