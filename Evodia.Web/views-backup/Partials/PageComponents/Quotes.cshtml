@using Umbraco.Web
@inherits UmbracoViewPage<IPublishedContent>
@{
	var wrapSize = ViewData["wrapSize"];

    var quotes = Model.GetPropertyValue<List<IPublishedContent>>("quotes");
    var alignment = Model.GetPropertyValue<string>("alignment") != null ? Model.GetPropertyValue<string>("alignment").ToLower() : "default";
    var hasQuotes = quotes.Any(x => x.HasValue("quoteMessage"));
    var isSlider = hasQuotes && quotes.Count() > 1;
    var sliderClass = isSlider ? "js-carousel" : "";
}

@if (isSlider)
{
	var modifierClass = alignment == "default" ? "c-carousel" : "";

    <div class="c-quotes o-wrap o-wrap--@wrapSize o-page-component @modifierClass">
        <div class="u-clearfix @sliderClass o-align--@alignment" data-nav="true" data-auto-play="true">
            @foreach (var item in quotes)
            {
                @RenderQuote(item)
            }
        </div>
    </div>
}
else
{
    var modifierClasses = "o-align--" + alignment;

    @RenderQuote(quotes.FirstOrDefault(), modifierClasses)
}


@helper RenderQuote(IPublishedContent item, string modifierClasses = "")
{
    var quote = item.GetPropertyValue("quoteMessage");
	var source = item.GetPropertyValue<string>("source");
	var role = item.GetPropertyValue<string>("role");
    var renderQuote = quote != null && quote.ToString() != "";

    if (!renderQuote)
    {
        return;
    }

	<div class="o-wrap o-wrap--small o-page-component">
	    <blockquote class="c-quote @modifierClasses">
	        <div class="c-quote__copy">
	            @quote
	        </div>

	        @if( item.HasValue("source") || item.HasValue("sourceName") ) {
	            <footer class="c-quote__src">
					@source
					@if(!String.IsNullOrEmpty(role) )
					{
					@:- <span class="u-light">@role</span>
					}
				</footer>
	        }
	    </blockquote>
	</div>
}
