@using Evodia.Core.Controllers
@using Umbraco.Web
@using Evodia.Core.Models
@inherits UmbracoViewPage<JobCvForm>
@{
    var success = TempData["JobCvFormValidationPasses"] != null;
    var error = TempData["JobCvFormValidationFailed"] != null;
    //var folderId = TempData["JobCvFormFolderId"];

    var formLegend = ViewData["legend"] != null ? ViewData["legend"] as string : "";
}

@if (success)
{
    @*if (folderId != null)
    {
        var folder = Umbraco.TypedContent(folderId);
        var message = folder.GetPropertyValue<IHtmlString>("submissionMessage");

        @message
    }*@
}
else
{
    if (error)
    {
        @Html.ValidationSummary()
    }

    using (Html.BeginUmbracoForm<JobCvController>("ProcessJobCvFormSubmission", FormMethod.Post, new { id = "vacancy-form", @class = "c-form js-form" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(x => x.JobPageId)
        @Html.HiddenFor(x => x.JobTitle)
        @Html.HiddenFor(x => x.JobReference)
        <fieldset class="o-form__fieldset c-cv-upload">
            @if (!string.IsNullOrWhiteSpace(formLegend))
            {
                <legend class="o-legend u-beta u-highlight-text u-space-bottom--small u-strong">@formLegend</legend>
            }
            <div class="o-form__field o-form__field--compact is-required">
                @Html.TextBoxFor(x => x.FirstName, new { @class = "o-input", required = "required" })
                @Html.LabelFor(x => x.FirstName, new { @class = "o-label" })
                @Html.ValidationMessageFor(x => x.FirstName)
            </div>
            <div class="o-form__field o-form__field--compact is-required">
                @Html.TextBoxFor(x => x.SecondName, new { @class = "o-input", required = "required" })
                @Html.LabelFor(x => x.SecondName, new { @class = "o-label" })
                @Html.ValidationMessageFor(x => x.SecondName)
            </div>
            <div class="o-form__field o-form__field--compact is-required">
                @Html.TextBoxFor(x => x.Email, new { @class = "o-input", required = "required", type = "email" })
                @Html.LabelFor(x => x.Email, new { @class = "o-label" })
                @Html.ValidationMessageFor(x => x.Email)
            </div>
            <div class="o-form__field o-form__field--file js-form__field--file">
                @Html.LabelFor(x => x.Attachment, new { @class = "o-label" })
                <img class="c-cv-upload__cloud" src="/assets/img/upload.png" alt="">
                <span class="u-delta c-cv-upload__text">
                    <span class="c-cv-upload__label">Drag and drop CV here</span><br>
                    <span class="c-cv-upload__or">or</span>
                </span>
                <div class="c-button c-button--secondary c-cv-upload__upload-field is-required">
                    BROWSE
                    @Html.TextBoxFor(x => x.Attachment, new { type = "file", required = "required", @class = "o-input--file", accepts = "application/pdf, application/msword" })
                </div>
                <p class="js-file-message"></p>
                @Html.ValidationMessageFor(x => x.Attachment)
            </div>
            <div class="o-form__field o-form__field--submit u-content--right">
                <button type="submit" class="c-button c-button--primary">Submit</button>
            </div>
        </fieldset>
    }
}
