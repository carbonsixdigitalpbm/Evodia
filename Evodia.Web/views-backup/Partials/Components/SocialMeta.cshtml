@using System.Text.RegularExpressions;
@using Umbraco.Web
@inherits UmbracoViewPage
@{
    var homePage = Umbraco.TypedContentAtRoot().First();
    var settings = homePage.Descendants("globalSettings").First();
    var siteUrl = "http://" +  Request.Url.Host;
    var pageUrl = siteUrl + Model.Url;
    var title = Model.HasValue("sEOTitle") ? Model.GetPropertyValue<string>("sEOTitle") : Model.Name + " | " + settings.GetPropertyValue<string>("websiteName");
    var description = "";
    var hasDescription = Model.HasValue("description");
    var hasExcerpt = Model.HasValue("excerpt");

    var pattern  = "<.*?>|\\r\\n?|\\n";

    if( hasDescription )
    {
        description = Model.GetPropertyValue<string>("description");
    }
    else if( hasExcerpt )
    {
        description = Model.GetPropertyValue<string>("excerpt");
    }
    else
    {
        var hasContent = Model.HasValue("mainContent");
        var content = Model.GetPropertyValue<IEnumerable<IPublishedContent>>("mainContent");

        if( hasContent && content.Any(x => x.DocumentTypeAlias == "text") )
        {
            description = content.First(x => x.DocumentTypeAlias == "text").GetPropertyValue<HtmlString>("mainContent").ToString();
        }
    }

    description = Regex.Replace(description, pattern, String.Empty);

    var imageUrl = "";
    var imageId = Model.HasValue("socialMediaImage") ?
                  Model.GetPropertyValue<string>("socialMediaImage") :
                  Model.HasValue("coverImage") ?
                  Model.GetPropertyValue<string>("coverImage") :
                  settings.GetPropertyValue<string>("defaultSocialMediaImage");

    if( !string.IsNullOrEmpty(imageId) )
    {
        var image = Umbraco.TypedMedia(imageId);
        imageUrl = siteUrl + Url.GetCropUrl(image, cropAlias: "open-graph", width: 1024, quality: 85, htmlEncode: false).ToString();
    }
}

<!-- OPEN GRAPH - http://ogp.me -->
<meta property="og:title" content="@title" />
<meta property="og:description" content="@description.Truncate(200)" />
<meta property="og:url" content="@pageUrl" />
<meta property="og:image" content="@imageUrl" />
<meta property="og:type" content="company" />

<!-- TWITTER CARD - https://dev.twitter.com/docs/cards/markup-reference -->
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:title" content="@title" />
<meta name="twitter:description" content="@description.Truncate(140)" />
<meta name="twitter:url" content="@pageUrl" />
<meta name="twitter:image" content="@imageUrl" />
<meta name="twitter:site" content="@siteUrl" />
<meta name="twitter:creator" content="EvodiaIT" />
